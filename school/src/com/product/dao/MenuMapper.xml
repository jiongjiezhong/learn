<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
					"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.product.dao.MenuMapper">
	<resultMap type="MenuModel" id="result_menu">
		<result property="menuId" column="menu_id" />
		<result property="menuType" column="menu_type" />
		<result property="contents" column="contents" />
		<result property="sortNumber" column="sort_number" />
		<result property="url" column="url" />
		<result property="rel" column="rel" />
		<result property="parentMenuId" column="parent_menu_id" />
		<result property="createDate" column="create_date" />
		<result property="createUser" column="create_user" />
		<result property="lastUpdateDate" column="last_update_date" />
		<result property="lastUpdateUser" column="last_update_user" />
	</resultMap>

	<insert id="addMenu" parameterType="MenuModel" keyProperty="menu_id">
		insert into p_m_menu
		(
		menu_id,
		menu_type,
		contents,
		sort_number,
		url,
		rel,
		parent_menu_id,
		notes,
		create_user,
		last_update_user
		)
		values
		(
		#{menuId},
		#{menuType},
		#{contents},
		#{sortNumber},
		#{url},
		#{rel},
		#{parentMenuId},
		#{notes},
		#{createUser},
		#{lastUpdateUser}
		)
	</insert>

	<update id="modifyMenu" parameterType="MenuModel">
		update p_m_menu
		<set>
			<if test="menuId!=null"> menu_id=#{menuId}, </if>
			<if test="menuType!=null"> menu_type=#{menuType}, </if>
			<if test="contents!=null"> contents=#{contents}, </if>
			<if test="sortNumber!=null"> sort_number=#{sortNumber}, </if>
			<if test="url!=null"> url=#{url}, </if>
			<if test="url!=null"> rel=#{rel}, </if>
			<if test="parentMenuId!=null"> parent_menu_id=#{parentMenuId}, </if>
			<if test="notes!=null"> notes=#{notes}, </if>
			last_update_date=sysdate(),
			<if test="lastUpdateUser!=null"> last_update_user=#{lastUpdateUser}, </if>
		</set>
		<where>
			menu_id=#{menuId}
		</where>
	</update>

	<select id="getMenuCountById" parameterType="String" resultType="int">
		select count(menu_id) as data_count from
		p_m_menu
		where
		menu_id=#{menuId}
	</select>

	<select id="findMenu" parameterType="String" resultMap="result_menu">
		select
		t.menu_id,
		t.menu_type,
		t.contents,
		t.sort_number,
		t.url,
		t.rel,
		t.parent_menu_id,
		m.contents parentMenuName,
		t.notes,
		t.create_date,
		t.create_user,
		t.last_update_date,
		t.last_update_user
		from
		p_m_menu t
		left join p_m_menu m on t.parent_menu_id=m.menu_id
		where
		t.menu_id = #{menuId}
	</select>

	<select id="getMenuList" resultMap="result_menu">
		select
		p_m_menu.menu_id,
		p_m_menu.menu_type,
		p_m_menu.contents,
		p_m_menu.sort_number,
		p_m_menu.url,
		p_m_menu.rel,
		p_m_menu.parent_menu_id,
		p_m_menu.notes,
		p_m_menu.create_date,
		p_m_menu.create_user,
		p_m_menu.last_update_date,
		p_m_menu.last_update_user
		from
		p_m_menu
	</select>

	<select id="searchMenuList" parameterType="MenuModel" resultMap="result_menu">
		select
		t.menu_id,
		t.menu_type,
		t.contents,
		t.sort_number,
		t.url,
		t.rel,
		t.parent_menu_id,
		m.contents parentMenuName,
		t.notes,
		t.create_date,
		t.create_user,
		t.last_update_date,
		t.last_update_user
		from
		p_m_menu t
		left join p_m_menu m on t.parent_menu_id=m.menu_id
		<where>
			<if test="menuId!=null"> and t.menu_id=#{menuId}</if>
			<if test="menuType!=null and menuType!=''"> and t.menu_type=#{menuType}</if>
			<if test="contents!=null and contents!=''"> and t.contents like concat('%',#{contents},'%')</if>
			<if test="sortNumber!=null and sortNumber!=''"> and t.sort_number=#{sortNumber}</if>
			<if test="url!=null and url!=''"> and t.url like concat('%',#{url},'%')</if>
			<if test="rel!=null and rel!=''"> and t.rel=#{rel}</if>
			<if test="parentMenuId!=null"> and t.parent_menu_id=#{parentMenuId}</if>
			<if test="notes!=null and notes!=''"> and t.notes=#{notes}</if>
		</where>
		order by t.PARENT_MENU_ID ASC, t.sort_number asc,t.menu_id asc
		<if test="pager!=null">limit #{pager.offset},#{pager.numPerPage}</if>
	</select>
	<select id="searchMenuListCount" parameterType="MenuModel" resultType="Long">
		select
		count(1)
		from
		p_m_menu t
		<where>
			<if test="menuId!=null"> and t.menu_id=#{menuId}</if>
			<if test="menuType!=null and menuType!=''"> and t.menu_type=#{menuType}</if>
			<if test="contents!=null and contents!=''"> and t.contents like concat('%',#{contents},'%')</if>
			<if test="sortNumber!=null and sortNumber!=''"> and t.sort_number=#{sortNumber}</if>
			<if test="url!=null and url!=''"> and t.url like concat('%',#{url},'%')</if>
			<if test="rel!=null and rel!=''"> and t.rel=#{rel}</if>
			<if test="parentMenuId!=null"> and t.parent_menu_id=#{parentMenuId}</if>
			<if test="notes!=null and notes!=''"> and t.notes=#{notes}</if>
		</where>
	</select>

	<delete id="removeMenu" parameterType="String">
		delete from p_m_menu where
		menu_id=#{menuId}
	</delete>
	<select id="getCheckedMenuListByRoleIdAndMenuIds"  resultMap="result_menu">
		select t.MENU_ID,t.menu_type,t.CONTENTS,t.sort_number,t.url,t.rel,t.parent_menu_id,
		(case when s.menu_id is null then 0 else 1 end) isSelected
		from p_m_menu t LEFT JOIN 
		(select m.MENU_ID from p_m_menu_role mr,p_m_menu m 
		where mr.MENU_ID=m.MENU_ID and mr.ROLE_ID=#{0}) s on t.menu_id=s.menu_id
		where FIND_IN_SET(t.menu_id,#{1}) 
		order by sort_number asc
	</select>
	
	<select id="getMenuListByRoleIds" parameterType="String" resultMap="result_menu">
		select t.MENU_ID,t.menu_type,t.CONTENTS,t.sort_number,t.url,t.rel,t.parent_menu_id,
			(select count(1) from p_m_menu m left join p_m_menu_role n on m.MENU_ID=n.MENU_ID 
			where m.PARENT_MENU_ID=t.menu_id and m.MENU_TYPE=1
			<if test="_parameter!=null and _parameter!=''"> and FIND_IN_SET(n.ROLE_ID,#{roleIds})</if>
			) hasChild
		from p_m_menu t left join p_m_menu_role mr on t.MENU_ID=mr.MENU_ID 
		where 1=1
		<if test="_parameter!=null and _parameter!=''">and  FIND_IN_SET(mr.ROLE_ID,#{roleIds})</if>
		GROUP BY t.MENU_ID
		order by PARENT_MENU_ID ASC, sort_number asc,menu_id asc
	</select>
	
	<delete id="removeMenusByRoleId" parameterType="String">
		delete from p_m_menu_role where
		role_id=#{roleId}
	</delete>
	
</mapper>